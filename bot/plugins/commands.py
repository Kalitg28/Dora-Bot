#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# (c) @AlbertEinsteinTG
import re
import random
import asyncio
import threading

from pyrogram import filters, Client
from pyrogram.errors.exceptions.bad_request_400 import PeerIdInvalid, UserNotParticipant
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from pyrogram.types.messages_and_media import photo
from pyrogram.types.messages_and_media.message import Message
from pyrogram.raw.functions.messages import GetAllChats
from bot import Translation, LOGGER # pylint: disable=import-error
from bot.database import Database # pylint: disable=import-error
from bot.plugins.batch import Batch
from bot.bot import Bot
from bot import Buttons

db = Database()


async def get_json(bot:Client, update:Message):

    await bot.send_chat_action(update.chat.id, "typing")

    if update.reply_to_message:
        string = str(update.reply_to_message)
    else :
        string = str(update)

    length = len(string)
    chunks = int(length/4000)

    for i in range(1, chunks+2):

        piece = string[(i-1)*4000:i*4000]
        await bot.send_message(
            update.chat.id,
            "<code>" + piece + "</code>",
            'html'
        )

    await update.reply_text("<code>‚ô° generated by :</code> @Dora_MV_Bot", parse_mode='html')


async def start(bot:Client , update:Message):

    if not update.chat.type=='private':
        buttons = Buttons.EN["START"]
        reply_markup = InlineKeyboardMarkup(buttons)

        return await update.reply_text(
        text="H·¥á è …™·¥ç ·¥Ä ü…™·¥†·¥á ·¥Ä…¥·¥Ö  Ä·¥ú…¥…¥…™…¥…¢ :)",
        reply_markup=reply_markup,
        parse_mode="html",
        quote=True
    )
    add = threading.Thread(target=asyncio.run, args=(db.add_user(update.from_user.id),))
    add.start()
    try:
        file_uid:str = update.text.split(None, 1)[1]
    except IndexError:
        file_uid = False

    await bot.send_chat_action(update.chat.id, "typing")
    
    if file_uid:
        if file_uid.startswith('fsub'):
            try:
                id, from_chat, message_id = re.findall(r'fsubz(.+)z', file_uid)[0].split('a', 2)
                chat = await bot.get_chat(int(id))
                link = chat.invite_link
                buttons = [[InlineKeyboardButton("Join ü§ì", url=link),InlineKeyboardButton("Retry ‚ôªÔ∏è", url=f"https://t.me/c/{from_chat}/{message_id}")]]
                await update.reply(
                text="<b>Sorry Man You'll Have To Join My Channel First To Use Me üôÇüôÇ\n\nJust Click On The Join Button Below And Come Back And Click On Retry......</b>",
                quote=True,
                reply_markup=InlineKeyboardMarkup(buttons)
                    )
                return
            except Exception as e:
                print(e)
                return await update.reply_text(f"Try Contacting Support Group Reason : <code>{e}</code>", parse_mode='html')
        elif file_uid.startswith('retry'):
            from_chat, message_id = re.findall(r'retryz(.+)z', file_uid)[0].split('a', 1)
            return await update.reply_text("Now Please Return And Try Again :)", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("Back", url=f"https://t.me/c/{from_chat}/{message_id}")]]), quote=True)
        elif file_uid.startswith('connect'):
            try:
                chat_id = int(file_uid.strip('connect '))
                try:
                    member = await bot.get_chat_member(chat_id, update.chat.id)
                    if not member.status in ('creator','administrator'):
                        return update.reply_text("You Dont Have Permission For That Bro :(")
                    result = await db.conn_user(update.from_user.id, chat_id)
                    if result :
                        return await update.reply_text("I've Successfully Connected You With And Can Do Any CHanges From Here :)") 
                    else:
                        return await update.reply_text("Connection Failed Try Contacting Support :(")
                except PeerIdInvalid:
                    return await update.reply_text("Looks Like Im Not Member Of That Chat Or The URl Is Invalid :(")
            except:
                return await update.reply_text("Thats An Invalid URL")

        if re.findall(r"^a(.+)a(.+)a(.+)", file_uid):
            await Batch.get_batch(file_uid, bot, update)
             
            return

        results = re.findall(r"^z(.+)z(.+)z$", file_uid)[0]
        if len(results)<2: return await update.reply_text("Thats Not A Valid Url Man...!", quote=True)
        new_uid = results[0]
        group_id = Batch.decode(results[1])
        settings = await db.find_chat(int(group_id))
        fsub = settings.get("fsub", None)
        

        if fsub:
                    fsub = fsub["id"]
                    fsub_msg = settings.get('fsub_msg')
                    try:
                        member = await bot.get_chat_member(int(fsub), update.from_user.id)
                        if member.status=='kicked':
                            await update.reply("Sorry Dude You're Banned In My Force Subscribe Channel So You Cant Use Me Right Now.....!!", quote=True)
                            return
                    except PeerIdInvalid:
                        pass
                    except TypeError as e:
                        print(e)
                        await update.reply_text("Thats Not A Valid Url Man...!", quote=True)
                        return
                    except UserNotParticipant:
                        chat = await bot.get_chat(int(fsub))
                        link = chat.invite_link
                        if not fsub_msg:
                            buttons = [[InlineKeyboardButton("Join ü§ì", url=link),InlineKeyboardButton("Retry ‚ôªÔ∏è", url=f"http://t.me/Dora_MV_Bot?start={file_uid}")]]
                            await update.reply(
                            text="<b>Sorry Man You'll Have To Join My Channel First To Use Me üôÇüôÇ\n\nJust Click On The Join Button Below And Come Back And Click On Retry......</b>",
                            quote=True,
                            reply_markup=InlineKeyboardMarkup(buttons)
                        )
                        else:
                            buttons = [[InlineKeyboardButton("Join ü§ì", url=link),InlineKeyboardButton("Retry ‚ôªÔ∏è", url=f"http://t.me/Dora_MV_Bot?start={file_uid}")]]
                            await update.reply(
                            text=fsub_msg,
                            quote=True,
                            reply_markup=InlineKeyboardMarkup(buttons)
                        )
                        return
                    except Exception as e:
                        print(e)

        caption = settings.get("caption", '')
        file_id, file_name, file_caption, file_type = await db.get_file(new_uid)
        
        if (file_id or file_type) == None:
            return
        
        file_caption = "<b>" + file_name + "</b>\n\n" + caption
        try:
            await update.reply_cached_media(
                file_id,
                quote=True,
                caption = file_caption,
                parse_mode="html",
            )
        except Exception as e:
            await update.reply_text(f"<b>Error:</b>\n<code>{e}</code>", True, parse_mode="html")
            LOGGER(__name__).error(e)
        return

    buttons = Buttons.EN["START"]
    
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.reply_photo(random.choice(Translation.START_PHOTOS))
    await bot.send_message(
        chat_id=update.chat.id,
        text=Translation.EN["START"].format(
                update.from_user.mention),
        reply_markup=reply_markup,
        parse_mode="html"
    )

async def help(bot, update):
    await bot.send_chat_action(update.chat.id, "typing")
    buttons = Buttons.EN["HELP"]
    
    reply_markup = InlineKeyboardMarkup(buttons)

    if not update.chat.type=='private':

        return await bot.send_message(
        chat_id=update.chat.id,
        text=Translation.EN["HELP"].format(update.from_user.mention),
        reply_markup=reply_markup,
        parse_mode="html")
    
    await update.reply_photo(photo="https://telegra.ph/file/7db104905e068ecf646ef.jpg")
    await bot.send_message(
        chat_id=update.chat.id,
        text=Translation.EN["HELP"].format(update.from_user.mention),
        reply_markup=reply_markup,
        parse_mode="html"
    )
     


async def about(bot, update:Message):

    await bot.send_chat_action(update.chat.id, "typing")
    
    buttons = Buttons.EN["ABOUT"]
    reply_markup = InlineKeyboardMarkup(buttons)
    
    await update.reply_photo(
        photo=random.choice(Translation.START_PHOTOS),
    )
    await update.reply_text(
        chat_id=update.chat.id,
        text=Translation.EN["ABOUT"],
        reply_markup=reply_markup,
        parse_mode="html",
        reply_to_message_id=update.message_id
    )
     

async def get_id(bot:Client, update:Message):

    chat_id = update.chat.id
    chat_type = update.chat.type
    await bot.send_chat_action(update.chat.id, "typing")

    if chat_type=="private":

        if not update.reply_to_message:

            await update.reply_text(f"<b>Your ID is : <code>{update.chat.id}</code></b>", parse_mode="html", quote=True)
            return

        elif update.reply_to_message and update.reply_to_message.forward_from_chat:

            await update.reply_text(f"<b>This Message Was Forwarded From : <code>{update.reply_to_message.forward_from_chat.id}</code></b>", parse_mode="html", quote=True)

        else :

            await update.reply_text(f"<b>Your ID is : <code>{update.chat.id}</code></b>", parse_mode="html", quote=True)

    elif chat_type=="group" or chat_type=="supergroup":

        if update.reply_to_message:

            await update.reply_text(f"This User's ID is : <code>{update.reply_to_message.from_user.id}</code>", parse_mode="html", quote=True)

        else :

            await update.reply_text(f"This Chat's ID is : <code>{update.chat.id}</code>", parse_mode="html", quote=True)

    elif chat_type=="channel":

        await update.reply_text(f"This Channel's ID is <code>{update.chat.id}</code>", parse_mode="html", quote=True)

     

async def get_stats(bot:Client, update):

    try:

        stats = await db.get_stats()
        await update.reply_text(
            f"‚ô° D·¥Ä·¥õ·¥Ä ô·¥Äs·¥á s·¥õ·¥Ä·¥õs ·¥è“ì D·¥è Ä·¥Ä:-\n\nF…™ ü·¥ás : {stats['files']}\n\nUs·¥á Äs : {stats['users']}\n\nC·¥è…¥…¥·¥á·¥Ñ·¥õ·¥á·¥Ö Us·¥á Äs : {stats['conn']}\n\nM·¥Ä…¥·¥ú·¥Ä ü F…™ ü·¥õ·¥á Äs : {stats['filters']}\n\nC·¥ús·¥õ·¥è·¥ç…™·¥¢·¥á·¥Ö C ú·¥Ä·¥õs : {stats['chats']}",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üè°  ú·¥è·¥ç·¥á üè°", callback_data="start"), InlineKeyboardButton("R·¥á“ì Ä·¥ás ú", callback_data="stats")]])
        )
    except Exception as e:
        print(e)

async def clearpredvd(bot, update):

    msg = await update.reply_text("Trying To Clear Predvd Files...")
    res = await db.clear_predvd()
    await msg.edit_text(f"Successfully Cleared {res} Predvd Files :)")

async def clearduplicate(bot, update):

    stats = await update.reply_text("Starting clearing Duplicate files...")
    await db.clear_duplicate(stats)
